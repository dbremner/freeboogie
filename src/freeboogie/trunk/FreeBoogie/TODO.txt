 . Update type checker for generics.
 . Does ImplementationChecker treat type vars correctly?
 . Add the "-old" flag to make freeboogie accept constructs that
   I intend to deprecate.
 . Add implicit type variables (h:[ref,<x>name]x -> h<x>:[ref...)
 . Boogie generates code like "call a,b:=f()" and I don't parse it
   because parenthesis are missing
 . Check that everything in the funcional/parser test typechecks
   in "compatibility mode"
 . Finish passivate; now you can use fancy generics to deal with arrays
 . Desugar dependent types in assumes/asserts
 . Desugar function calls into assumes/asserts (remember that free is special)
 . Desugar specs intos assumes/asserts (introduces two? new blocks)
 . Transform BoogiePL expressions into SmtTerms (SmtTermBuilder)
   Take care of arrays (does the prover know about arrays?)
 . Extract sharing in SimplifyProver, or use `flet' for z3
 . When making SmtTerms do small simplifications for "and", "or"
   (such as skip "TRUE", respectively "FALSE"; and return
   neutral element when there are no operands)
 . Cut out loops
 . Make flowgraph reducible
 . Simple interface to parse from strings

vim:spell:ts=3:sw=3:fdm=manual:
