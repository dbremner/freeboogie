REQUIREMENTS

Principles
 * few AST nodes
 * support pretty print and verbose dump for debug
 * must be able to parse/print programs and program fragments (expr, stmt)
 * must read from both streams and strings (TODO: is there a stream
   wrapper around a string?)
 
 
The parser will be hand-crafted because the language is simple.
The AST will also be hand-crafted.
(It was hard to take this decision. Generating these from concrete/abstract
syntax is nicer but the overhead is not worth it for a language of this size.
I also retain for flexibility.) 

The abstract syntax is the following.

program ::= decl*
decl ::= type | constant | function | axiom | variable | procedure | implementation
type ::=  primtype | id | idx:type type | idx0:type idx1:type type
primtype ::= 'bool | 'int | 'ref | 'name | 'any

